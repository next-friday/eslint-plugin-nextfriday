name: Release

on:
  push:
    branches: [main]

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Dependencies
        uses: ./.github/common-actions/install

      - name: Check for Changesets
        id: check
        run: |
          CHANGESET_FILES=$(ls .changeset/*.md 2>/dev/null | grep -v README.md || true)
          echo "has-changesets=$([ -n "$CHANGESET_FILES" ] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Build Package
        if: steps.check.outputs.has-changesets == 'true'
        run: pnpm build

      - name: Create/Update Version PR
        if: steps.check.outputs.has-changesets == 'true'
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm changeset:publish
          createGithubReleases: true
          title: "ci(changesets): version packages"
          commit: "ci(changesets): version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.CHANGESETS_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Enable PR auto-merge
        if: steps.changesets.outputs.pullRequestNumber != ''
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.CHANGESETS_TOKEN }}
          pull-request-number: ${{ steps.changesets.outputs.pullRequestNumber }}
          merge-method: squash

      - name: Check for Version Changes
        if: steps.check.outputs.has-changesets == 'false'
        id: version-check
        run: |
          NAME=$(node -p "require('./package.json').name")
          CURRENT=$(node -p "require('./package.json').version")
          PUBLISHED=$(npm view "$NAME" version 2>/dev/null || echo "0.0.0")
          echo "pkg-name=$NAME" >> $GITHUB_OUTPUT
          echo "should-publish=$([ "$CURRENT" != "$PUBLISHED" ] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Build Package
        if: steps.version-check.outputs.should-publish == 'true'
        run: pnpm build

      - name: Configure npm auth
        if: steps.version-check.outputs.should-publish == 'true'
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to NPM
        if: steps.check.outputs.has-changesets == 'false' && steps.version-check.outputs.should-publish == 'true'
        run: pnpm changeset:publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.check.outputs.has-changesets == 'false' && steps.version-check.outputs.should-publish == 'true'
        env:
          GH_TOKEN: ${{ secrets.CHANGESETS_TOKEN }}
        run: |
          VERSION="v$(node -p "require('./package.json').version")"
          gh release create "$VERSION" --title "Release $VERSION" --generate-notes
